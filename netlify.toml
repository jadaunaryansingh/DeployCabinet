[build]
  base = "Cabi_Latest_With_API"
  command = "npm run build:netlify"
  functions = "netlify/functions"
  publish = "dist/spa"

[build.environment]
  NODE_VERSION = "18"
  NPM_VERSION = "9"
  SECRETS_SCAN_ENABLED = "false"

# Disable secrets scanning for expected API keys
[build.processing]
  skip_processing = false

[functions]
  external_node_modules = ["express", "firebase"]
  node_bundler = "esbuild"
  included_files = ["server/**/*"]

# API routes - redirect to serverless functions
[[redirects]]
  force = true
  from = "/api/*"
  status = 200
  to = "/.netlify/functions/api/:splat"

# Handle Firebase Auth redirects
[[redirects]]
  from = "/__/auth/handler"
  to = "/.netlify/functions/api/auth/handler"
  status = 200

# Serve static assets with correct MIME types
[[redirects]]
  from = "/assets/*"
  to = "/assets/:splat"
  status = 200

# SPA fallback - handle all other routes by serving index.html
# This ensures React Router can handle client-side routing
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
  force = true

# Handle trailing slashes
[[redirects]]
  from = "/*/"
  to = "/:splat"
  status = 301

# Security headers
[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Content-Security-Policy = "default-src 'self' 'unsafe-inline' 'unsafe-eval'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.gstatic.com https://www.googleapis.com https://apis.google.com https://www.googletagmanager.com https://maps.googleapis.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' 'unsafe-inline' https://fonts.gstatic.com data:; img-src 'self' data: https: blob:; connect-src 'self' https://identitytoolkit.googleapis.com https://securetoken.googleapis.com https://firestore.googleapis.com https://www.googleapis.com https://firebase.googleapis.com https://firebaseinstallations.googleapis.com https://www.googletagmanager.com https://analytics.google.com https://www.google-analytics.com https://maps.googleapis.com; frame-src 'self' https://accounts.google.com https://cab-i-net-87713.firebaseapp.com https://luxury-pixie-1db267.netlify.app; object-src 'none'; base-uri 'self'; form-action 'self';"
    X-Content-Security-Policy = "default-src 'self' 'unsafe-inline' 'unsafe-eval'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.gstatic.com https://www.googleapis.com https://apis.google.com https://www.googletagmanager.com https://maps.googleapis.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' 'unsafe-inline' https://fonts.gstatic.com data:; img-src 'self' data: https: blob:; connect-src 'self' https://identitytoolkit.googleapis.com https://securetoken.googleapis.com https://firestore.googleapis.com https://www.googleapis.com https://firebase.googleapis.com https://firebaseinstallations.googleapis.com https://www.googletagmanager.com https://analytics.google.com https://www.google-analytics.com https://maps.googleapis.com; frame-src 'self' https://accounts.google.com https://cab-i-net-87713.firebaseapp.com https://luxury-pixie-1db267.netlify.app; object-src 'none'; base-uri 'self'; form-action 'self';"

# Cache static assets
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"

# Ensure JavaScript files are served with correct MIME type
[[headers]]
  for = "*.js"
  [headers.values]
    Content-Type = "application/javascript"
    Cache-Control = "public, max-age=31536000, immutable"

# Ensure CSS files are served with correct MIME type
[[headers]]
  for = "*.css"
  [headers.values]
    Content-Type = "text/css"
    Cache-Control = "public, max-age=31536000, immutable"

# Cache images
[[headers]]
  for = "*.png"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.jpg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.jpeg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.svg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.ico"
  [headers.values]
    Cache-Control = "public, max-age=31536000" 